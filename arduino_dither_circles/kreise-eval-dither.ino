#include <Wire.h>

#pragma GCC optimize ("Ofast","unsafe-math-optimizations","no-signed-zeros","rename-registers")
#define DISABLE_OFAST

#define ENABLE_TRIANGLES
#define ENABLE_ARDUINO_SUPPORT
//#define ENABLE_WIRE
#define WIRE_SCREEN_ADDRESS 0x3C
#define ENABLE_LINEDRAWING
#define NR_LINES 12
//#define ENABLE_MULTITASK
#define OS_MAX_TASKS 2
#define OS_TASK_STACK 384


#include <stdlib.h>
#include <stdfix.h>
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>
#include <stdbool.h>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/boot.h>
#include <avr/interrupt.h>
#include <string.h>
///////////////////////////////////////////////////////////////////////////////
// OS-Configuration////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//#define ENABLE_MULTITASK
#define OS_MAX_TASKS 2
#define OS_TASK_STACK 384
//#define ENABLE_USERFONT 1
#define NR_CIRCLES 16
///////////////////////////////////////////////////////////////////////////////
//Gfx-Api Configuration
///////////////////////////////////////////////////////////////////////////////
unsigned char render_lines(unsigned char x,unsigned char y);
#define DISPLAYFUNC Display
#define CONSOLE_LINE_END (CONSOLE_LINE_START+(CONSOLE_SIZE_Y*8))
//#define ENABLE_SPRITES
//#define PIXEL_CALLBACK render_lines
//#define ENABLE_LAYERS
//#define ENABLE_CONSOLE
#define NR_LAYERS 1
#define NR_SPRITES 0
//#define SUBTRACT_LAYER0
#define CONSOLE_SIZE_Y 1
#define CONSOLE_LINE_START (0*8)
////////
#define ENABLE_CIRCLES
#include "/dev/tiny_multi_os.h"
///////////////////////////////////////////////////////////////////////////////
//Gfx-Api Build Render Function from Defines
#include "/dev/displayfunc.h"
/////////////////////////////////////////////////////////////////////
// this is NOT how you should design a 3D-Engine, one should use matrix multiplications, but it demonstrates how to draw lines


const s8 sin_tab[256] PROGMEM=
{
    127*0.0,
    127*0.024541228522912288,
    127*0.049067674327418015,
    127*0.073564563599667426,
    127*0.098017140329560604,
    127*0.1224106751992162,
    127*0.14673047445536175,
    127*0.17096188876030122,
    127*0.19509032201612825,
    127*0.2191012401568698,
    127*0.24298017990326387,
    127*0.26671275747489837,
    127*0.29028467725446233,
    127*0.31368174039889152,
    127*0.33688985339222005,
    127*0.35989503653498811,
    127*0.38268343236508978,
    127*0.40524131400498986,
    127*0.42755509343028208,
    127*0.44961132965460654,
    127*0.47139673682599764,
    127*0.49289819222978404,
    127*0.51410274419322166,
    127*0.53499761988709715,
    127*0.55557023301960218,
    127*0.57580819141784534,
    127*0.59569930449243336,
    127*0.61523159058062682,
    127*0.63439328416364549,
    127*0.65317284295377676,
    127*0.67155895484701833,
    127*0.68954054473706683,
    127*0.70710678118654746,
    127*0.72424708295146689,
    127*0.74095112535495911,
    127*0.75720884650648446,
    127*0.77301045336273699,
    127*0.78834642762660623,
    127*0.80320753148064483,
    127*0.81758481315158371,
    127*0.83146961230254524,
    127*0.84485356524970701,
    127*0.85772861000027212,
    127*0.87008699110871135,
    127*0.88192126434835494,
    127*0.89322430119551532,
    127*0.90398929312344334,
    127*0.91420975570353069,
    127*0.92387953251128674,
    127*0.93299279883473885,
    127*0.94154406518302081,
    127*0.94952818059303667,
    127*0.95694033573220894,
    127*0.96377606579543984,
    127*0.97003125319454397,
    127*0.97570213003852857,
    127*0.98078528040323043,
    127*0.98527764238894122,
    127*0.98917650996478101,
    127*0.99247953459870997,
    127*0.99518472667219682,
    127*0.99729045667869021,
    127*0.99879545620517241,
    127*0.99969881869620425,
    127*1.0,
    127*0.99969881869620425,
    127*0.99879545620517241,
    127*0.99729045667869021,
    127*0.99518472667219693,
    127*0.99247953459870997,
    127*0.98917650996478101,
    127*0.98527764238894122,
    127*0.98078528040323043,
    127*0.97570213003852857,
    127*0.97003125319454397,
    127*0.96377606579543984,
    127*0.95694033573220894,
    127*0.94952818059303667,
    127*0.94154406518302081,
    127*0.93299279883473885,
    127*0.92387953251128674,
    127*0.91420975570353069,
    127*0.90398929312344345,
    127*0.89322430119551521,
    127*0.88192126434835505,
    127*0.87008699110871146,
    127*0.85772861000027212,
    127*0.84485356524970723,
    127*0.83146961230254546,
    127*0.81758481315158371,
    127*0.80320753148064494,
    127*0.78834642762660634,
    127*0.7730104533627371,
    127*0.75720884650648468,
    127*0.74095112535495899,
    127*0.72424708295146689,
    127*0.70710678118654757,
    127*0.68954054473706705,
    127*0.67155895484701855,
    127*0.65317284295377664,
    127*0.63439328416364549,
    127*0.61523159058062693,
    127*0.59569930449243347,
    127*0.57580819141784545,
    127*0.55557023301960218,
    127*0.53499761988709715,
    127*0.51410274419322177,
    127*0.49289819222978415,
    127*0.47139673682599786,
    127*0.44961132965460687,
    127*0.42755509343028203,
    127*0.40524131400498992,
    127*0.38268343236508989,
    127*0.35989503653498833,
    127*0.33688985339222033,
    127*0.31368174039889141,
    127*0.29028467725446239,
    127*0.26671275747489848,
    127*0.24298017990326407,
    127*0.21910124015687005,
    127*0.19509032201612861,
    127*0.17096188876030122,
    127*0.1467304744553618,
    127*0.12241067519921635,
    127*0.098017140329560826,
    127*0.073564563599667732,
    127*0.049067674327417966,
    127*0.024541228522912326,
    127*0.0,
    127*-0.02454122852291208,
    127*-0.049067674327417724,
    127*-0.073564563599667496,
    127*-0.09801714032956059,
    127*-0.1224106751992161,
    127*-0.14673047445536158,
    127*-0.17096188876030097,
    127*-0.19509032201612836,
    127*-0.2191012401568698,
    127*-0.24298017990326382,
    127*-0.26671275747489825,
    127*-0.29028467725446211,
    127*-0.31368174039889118,
    127*-0.33688985339222011,
    127*-0.35989503653498811,
    127*-0.38268343236508967,
    127*-0.40524131400498969,
    127*-0.42755509343028181,
    127*-0.44961132965460665,
    127*-0.47139673682599764,
    127*-0.49289819222978393,
    127*-0.51410274419322155,
    127*-0.53499761988709693,
    127*-0.55557023301960196,
    127*-0.57580819141784534,
    127*-0.59569930449243325,
    127*-0.61523159058062671,
    127*-0.63439328416364527,
    127*-0.65317284295377653,
    127*-0.67155895484701844,
    127*-0.68954054473706683,
    127*-0.70710678118654746,
    127*-0.72424708295146678,
    127*-0.74095112535495888,
    127*-0.75720884650648423,
    127*-0.77301045336273666,
    127*-0.78834642762660589,
    127*-0.80320753148064505,
    127*-0.81758481315158382,
    127*-0.83146961230254524,
    127*-0.84485356524970701,
    127*-0.85772861000027201,
    127*-0.87008699110871135,
    127*-0.88192126434835494,
    127*-0.89322430119551521,
    127*-0.90398929312344312,
    127*-0.91420975570353047,
    127*-0.92387953251128652,
    127*-0.93299279883473896,
    127*-0.94154406518302081,
    127*-0.94952818059303667,
    127*-0.95694033573220882,
    127*-0.96377606579543984,
    127*-0.97003125319454397,
    127*-0.97570213003852846,
    127*-0.98078528040323032,
    127*-0.98527764238894111,
    127*-0.9891765099647809,
    127*-0.99247953459871008,
    127*-0.99518472667219693,
    127*-0.99729045667869021,
    127*-0.99879545620517241,
    127*-0.99969881869620425,
    127*-1.0,
    127*-0.99969881869620425,
    127*-0.99879545620517241,
    127*-0.99729045667869021,
    127*-0.99518472667219693,
    127*-0.99247953459871008,
    127*-0.9891765099647809,
    127*-0.98527764238894122,
    127*-0.98078528040323043,
    127*-0.97570213003852857,
    127*-0.97003125319454397,
    127*-0.96377606579543995,
    127*-0.95694033573220894,
    127*-0.94952818059303679,
    127*-0.94154406518302092,
    127*-0.93299279883473907,
    127*-0.92387953251128663,
    127*-0.91420975570353058,
    127*-0.90398929312344334,
    127*-0.89322430119551532,
    127*-0.88192126434835505,
    127*-0.87008699110871146,
    127*-0.85772861000027223,
    127*-0.84485356524970723,
    127*-0.83146961230254546,
    127*-0.81758481315158404,
    127*-0.80320753148064528,
    127*-0.78834642762660612,
    127*-0.77301045336273688,
    127*-0.75720884650648457,
    127*-0.74095112535495911,
    127*-0.724247082951467,
    127*-0.70710678118654768,
    127*-0.68954054473706716,
    127*-0.67155895484701866,
    127*-0.65317284295377709,
    127*-0.63439328416364593,
    127*-0.61523159058062737,
    127*-0.59569930449243325,
    127*-0.57580819141784523,
    127*-0.55557023301960218,
    127*-0.53499761988709726,
    127*-0.51410274419322188,
    127*-0.49289819222978426,
    127*-0.47139673682599792,
    127*-0.44961132965460698,
    127*-0.42755509343028253,
    127*-0.40524131400499042,
    127*-0.38268343236509039,
    127*-0.359895036534988,
    127*-0.33688985339222,
    127*-0.31368174039889152,
    127*-0.2902846772544625,
    127*-0.26671275747489859,
    127*-0.24298017990326418,
    127*-0.21910124015687016,
    127*-0.19509032201612872,
    127*-0.17096188876030177,
    127*-0.14673047445536239,
    127*-0.12241067519921603,
    127*-0.098017140329560506,
    127*-0.073564563599667412,
    127*-0.049067674327418091,
    127*-0.024541228522912448
};
# define M_PI    3.14159265358979323846  /* pi */

float FastSin(float x)
{
  return(sin(x));
    u8 si = x * (0.5 * 256 / M_PI);
    return sin_tab[si]/128.0f;
}
void setup() {
  // put your setup code here, to run once:
  streamgfx_init_arduino();
   // Serial.begin(9600); // Ã–ffnet die serielle Schnittstelle bei 9600 Bit/s:

}

void loop() {
  // put your main code here, to run repeatedly:
  u8 inverted=0;
  GfxApiSetFreq(15);
  float refr_wobble=0,refr_wobble_cnt=0,refr_wobble_mul=1;
  u8 fr=0;
  for (;;)
  {
    if(rand()<RAND_MAX/80)inverted^=1,refr_wobble=1,refr_wobble_cnt=0,refr_wobble_mul=7,fr=0;
    GfxApiSetInvert(inverted);
    float br=15 +refr_wobble_mul*(FastSin(refr_wobble_cnt)-1.0);
    GfxApiSetFreq(fr/2);
    if(fr<31)fr++;
    
    refr_wobble_cnt+=0.5;
    GfxApiSetBrightness(br);
    if(refr_wobble_mul>0)refr_wobble_mul-=0.5;else refr_wobble_mul=0;
    GfxApiBeginCircles();
    int i;
    static float c;
    c+=0.05;

    const u8 p[]={10,20,30,40};
    
    for(i=0;i<16;i++)
    {
      GfxApiStoreCircle(128+32*FastSin((i*c)/10.0+c),128+31*FastSin((i*c)/11.0+c),FastSin((i+c)/12+c)*10+10,FastSin((i+c)/13+c)*31+31);
    }
    Display(0, 0, 0,0);
  }

}
